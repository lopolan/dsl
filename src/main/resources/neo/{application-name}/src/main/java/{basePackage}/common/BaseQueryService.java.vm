package ${basePackage}.common;

import ${basePackage}.api.filter.*;


import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.core.toolkit.support.SFunction;
import com.baomidou.mybatisplus.extension.conditions.query.LambdaQueryChainWrapper;
import com.baomidou.mybatisplus.extension.toolkit.ChainWrappers;
import org.springframework.beans.factory.annotation.Autowired;

public class BaseQueryService<ENTITY> {

  protected BaseMapper<ENTITY> baseMapper;

  @Autowired
  public MybatisQueryService(BaseMapper<ENTITY> baseMapper) {
    this.baseMapper = baseMapper;
  }
  protected LambdaQueryChainWrapper<ENTITY> fetchWapper() {
    return ChainWrappers.lambdaQueryChain(baseMapper);
  }
  protected <X> LambdaQueryChainWrapper<ENTITY> buildSpecification(Filter<X> filter, SFunction<ENTITY,X> consumer, LambdaQueryChainWrapper<ENTITY> queryChainWrapper) {
    if (filter.getEquals() != null) {
      return queryChainWrapper.eq(consumer,filter.getEquals());
    } else if (filter.getIn() != null) {
      return queryChainWrapper.in(consumer,filter.getIn());
    } else if (filter.getNotEquals() != null) {
      return queryChainWrapper.ne(consumer,filter.getIn());
    } else {
      return filter.getSpecified() != null ? (filter.getSpecified()?queryChainWrapper.isNull(consumer):queryChainWrapper.isNotNull(consumer)) : queryChainWrapper;
    }
  }
  protected LambdaQueryChainWrapper<ENTITY> buildStringSpecification(StringFilter filter, SFunction<ENTITY,String> consumer, LambdaQueryChainWrapper<ENTITY> queryChainWrapper) {
    if (filter.getEquals() != null) {
      return queryChainWrapper.eq(consumer,filter.getEquals());
    } else if (filter.getIn() != null) {
      return queryChainWrapper.in(consumer,filter.getIn());
    } else if (filter.getContains() != null) {
      return queryChainWrapper.like(consumer,filter.getContains());
    } else if (filter.getDoesNotContain() != null) {
      return queryChainWrapper.notLike(consumer,filter.getContains());
    } else if (filter.getNotEquals() != null) {
      return queryChainWrapper.ne(consumer,filter.getIn());
    } else {
      return filter.getSpecified() != null ? (filter.getSpecified()?queryChainWrapper.isNull(consumer):queryChainWrapper.isNotNull(consumer)) : queryChainWrapper;
    }
  }

  protected <X extends Comparable<? super X>> LambdaQueryChainWrapper<ENTITY> buildRangeSpecification(RangeFilter<X> filter, SFunction<ENTITY,X> consumer,LambdaQueryChainWrapper<ENTITY> queryChainWrapper) {
    if (filter.getEquals() != null) {
      return queryChainWrapper.eq(consumer,filter.getEquals());
    } else if (filter.getIn() != null) {
      return queryChainWrapper.in(consumer,filter.getIn());
    } else {
      if (filter.getSpecified() != null) {
        queryChainWrapper = filter.getSpecified()?queryChainWrapper.isNull(consumer):queryChainWrapper.isNotNull(consumer);
      }

      if (filter.getNotEquals() != null) {
        queryChainWrapper = queryChainWrapper.ne(consumer,filter.getIn());
      }

      if (filter.getGreaterThan() != null) {
        queryChainWrapper = queryChainWrapper.gt(consumer, filter.getGreaterThan());
      }

      if (filter.getGreaterThanOrEqual() != null) {
        queryChainWrapper = queryChainWrapper.ge(consumer, filter.getGreaterThanOrEqual());
      }

      if (filter.getLessThan() != null) {
        queryChainWrapper = queryChainWrapper.lt(consumer, filter.getLessThan());
      }

      if (filter.getLessThanOrEqual() != null) {
        queryChainWrapper = queryChainWrapper.le(consumer, filter.getLessThanOrEqual());
      }
      return queryChainWrapper;
    }
  }
}
