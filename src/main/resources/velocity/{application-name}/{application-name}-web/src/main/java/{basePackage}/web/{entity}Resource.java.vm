package ${basePackage}.web;

import $entity.classFullName;
import $entity.serviceFullName;
import $entity.mapperFullName;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.yematech.basic.core.response.StandardPageView;
import com.yematech.basic.core.util.StandardPageUtil;
import io.swagger.annotations.Api;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.Map;

@RestContriller
@Api("$!entity.comment")
@RequestMapping("/$entity.pathName")
public class ${entity.className}Resource {

  private final Logger log = LoggerFactory.getLogger(${entity.className}Resource.class);

  private ${entity.className}Mapping ${entity.name}Mapping;
  private ${entity.className}Service ${entity.name}Service;
  private ${entity.className}QueryService ${entity.name}QueryService;


  @PostMapping
  public ${entity.className}DTO create(@RequestBody ${entity.className}DTO dto)
      throws URISyntaxException {
    if (dto.getId() != null) {
      throw new IllegalArgumentException("ID");
    }
    return ${entity.name}Service.save(dto);
  }

  @PutMapping
  public ${entity.className}DTO update(@RequestBody ${entity.className}DTO dto)
      throws URISyntaxException {
    if (dto.getId() == null) {
      throw new IllegalArgumentException("ID");
    }
    return ${entity.name}Service.partialUpdate(dto);
  }

  @DeleteMapping("/{id}")
  public Boolean remove(@PathVariable("id") String id) {
    if (dto.getId() == null) {
      throw new IllegalArgumentException("ID");
    }
    return ${entity.name}Service.delete(id);
  }

  @GetMapping("/{id}")
  public ${entity.className}DTO get(@PathVariable("id") String id) {
    if (dto.getId() == null) {
      throw new IllegalArgumentException("ID");
    }
    return ${entity.name}Service.findOne(id);
  }

  @GetMapping("/page")
  public StandardPageView<${entity.className}DTO> get(${entity.className}Criteria criteria, Pageable pageable) throws URISyntaxException {
    return StandardPageUtil.mybatisPlusTransfer(
                ${entity.name}QueryService.findByCriteria(
            criteria,
            new Page<>(pageable.getPageNumber(), pageable.getPageSize())
        ),
        ${entity.name}Mapping::toDto
    );
  }
}