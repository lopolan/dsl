package ${basePackage}.impl;

import ${basePackage}.domain.${entity.className};
import ${basePackage}.api.dto.${entity.className}DTO;
import ${basePackage}.mapstruct.${entity.className}Mapping;
import ${basePackage}.mapstruct.${entity.className}Mapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.apache.ibatis.annotations.Mapper;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class ${entity.className}ServiceImpl extends
    ServiceImpl<${entity.className}Mapper, ${entity.className}> {

  private final Logger logger = LoggerFactory.getLogger(${entity.className}ServiceImpl.class);
  private ${entity.className}Mapping ${entity.name}Mapping;
  public ${entity.className}ServiceImpl(${entity.className}Mapping ${entity.name}Mapping){
    this.${entity.name}Mapping = ${entity.name}Mapping;
  }
  public ${entity.className}DTO save(${entity.className}DTO dto) {
    Optional.ofNullable(dto).map(${entity.name}Mapping::toDo).map(t -> {
      this.save(t);
      return ${entity.name}Mapping.toDto(t);
    }).orElseThrow(() -> new IllegalArgumentException("参数错误"));
  }

  public ${entity.className}DTO partialUpdate(${entity.className}DTO dto) {
    if (dto.getId() == null) {
      throw new IllegalArgumentException("identity could not be null");
    }
    Optional.ofNullable(dto).map(${entity.name}Mapping::toDo).map(t -> {
      this.saveOrUpdate(t);
      return ${entity.name}Mapping.toDto(t);
    }).orElseThrow(() -> new IllegalArgumentException("参数错误"));
  }

  @Transactional(readOnly = true)
  public ${entity.className}DTO findOne(${environment.keyType} key) {
    return Optional.ofNullable(this.getById(id)).map(${entity.name}Mapping::toDto);
  }

  public void delete(${environment.keyType} key) {
    this.removeById(id);
  }
}
